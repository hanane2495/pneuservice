{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debounce = debounce;\nexports.isCached = void 0;\n\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this,\n        args = arguments;\n\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    if (immediate && !timeout) func.apply(context, args);\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n/**\r\n* This function will return the cachedValues if they exist or false if not\r\n* \r\n* @param {string} keyword The string the user is searching\r\n*/\n\n\nvar isCached = function isCached(keyword) {\n  keyword = keyword.toLowerCase();\n  var cachedValues = JSON.parse(sessionStorage.getItem(keyword.toLowerCase()));\n  if (cachedValues) return cachedValues;\n  return false;\n};\n\nexports.isCached = isCached;","map":{"version":3,"sources":["../../src/utils/utils.js"],"names":["context","args","later","timeout","func","immediate","clearTimeout","setTimeout","isCached","keyword","cachedValues","JSON","sessionStorage"],"mappings":";;;;;;;;AAAO,SAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAyC;AAC9C,MAAA,OAAA;AACA,SAAO,YAAW;AAChB,QAAIA,OAAO,GAAX,IAAA;AAAA,QAAoBC,IAAI,GAAxB,SAAA;;AACA,QAAIC,KAAK,GAAG,SAARA,KAAQ,GAAW;AACrBC,MAAAA,OAAO,GAAPA,IAAAA;AACA,UAAI,CAAJ,SAAA,EAAgBC,IAAI,CAAJA,KAAAA,CAAAA,OAAAA,EAAAA,IAAAA;AAFlB,KAAA;;AAIA,QAAIC,SAAS,IAAI,CAAjB,OAAA,EAA2BD,IAAI,CAAJA,KAAAA,CAAAA,OAAAA,EAAAA,IAAAA;AAC3BE,IAAAA,YAAY,CAAZA,OAAY,CAAZA;AACAH,IAAAA,OAAO,GAAGI,UAAU,CAAA,KAAA,EAApBJ,IAAoB,CAApBA;AARF,GAAA;AAUD;AAED;;;;;;;AAMO,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAAA,OAAA,EAAW;AACjCC,EAAAA,OAAO,GAAGA,OAAO,CAAjBA,WAAUA,EAAVA;AACA,MAAMC,YAAY,GAAGC,IAAI,CAAJA,KAAAA,CAAWC,cAAc,CAAdA,OAAAA,CAAuBH,OAAO,CAA9D,WAAuDA,EAAvBG,CAAXD,CAArB;AACA,MAAA,YAAA,EAAkB,OAAA,YAAA;AAClB,SAAA,KAAA;AAJK,CAAA","sourcesContent":["export function debounce(func, wait, immediate) {\r\n  var timeout;\r\n  return function() {\r\n    var context = this, args = arguments;\r\n    var later = function() {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    if (immediate && !timeout) func.apply(context, args);\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n}\r\n\r\n/**\r\n* This function will return the cachedValues if they exist or false if not\r\n* \r\n* @param {string} keyword The string the user is searching\r\n*/\r\n\r\nexport const isCached = keyword => {\r\n  keyword = keyword.toLowerCase();\r\n  const cachedValues = JSON.parse(sessionStorage.getItem(keyword.toLowerCase()));\r\n  if (cachedValues) return cachedValues;\r\n  return false;\r\n}"]},"metadata":{},"sourceType":"script"}