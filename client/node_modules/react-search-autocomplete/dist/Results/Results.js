"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Results;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SearchIcon = require("../icons/SearchIcon");

var _StyledResults = require("./StyledResults");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function Results(props) {
  var results = props.results,
      onClick = props.onClick,
      setSearchString = props.setSearchString,
      showIcon = props.showIcon,
      maxResults = props.maxResults;

  var handleClick = function handleClick(result) {
    onClick(result);
    setSearchString(result.name);
  };

  return results.length > 0 ? _react["default"].createElement(_StyledResults.StyledResults, null, _react["default"].createElement("div", {
    className: "line"
  }), _react["default"].createElement("ul", null, results.slice(0, maxResults).map(function (result) {
    return _react["default"].createElement("li", {
      key: result.id,
      onMouseDown: function onMouseDown() {
        return handleClick(result);
      },
      onClick: function onClick() {
        return handleClick(result);
      }
    }, showIcon && _react["default"].createElement("div", {
      className: "icon"
    }, _react["default"].createElement(_SearchIcon.SearchIcon, null)), _react["default"].createElement("div", {
      className: "ellipsis",
      title: result.name
    }, result.name));
  }))) : null;
}

Results.defaultProps = {
  results: [],
  setSearchString: function setSearchString() {}
};
Results.propTypes = {
  results: _propTypes["default"].array,
  onClick: _propTypes["default"].func,
  setSearchString: _propTypes["default"].func,
  showIcon: _propTypes["default"].bool,
  maxResults: _propTypes["default"].number
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZXN1bHRzL1Jlc3VsdHMuanMiXSwibmFtZXMiOlsiUmVzdWx0cyIsInByb3BzIiwicmVzdWx0cyIsIm9uQ2xpY2siLCJzZXRTZWFyY2hTdHJpbmciLCJzaG93SWNvbiIsIm1heFJlc3VsdHMiLCJoYW5kbGVDbGljayIsInJlc3VsdCIsIm5hbWUiLCJsZW5ndGgiLCJzbGljZSIsIm1hcCIsImlkIiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXkiLCJmdW5jIiwiYm9vbCIsIm51bWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFBQSxNQUduQ0MsT0FIbUMsR0FRakNELEtBUmlDLENBR25DQyxPQUhtQztBQUFBLE1BSW5DQyxPQUptQyxHQVFqQ0YsS0FSaUMsQ0FJbkNFLE9BSm1DO0FBQUEsTUFLbkNDLGVBTG1DLEdBUWpDSCxLQVJpQyxDQUtuQ0csZUFMbUM7QUFBQSxNQU1uQ0MsUUFObUMsR0FRakNKLEtBUmlDLENBTW5DSSxRQU5tQztBQUFBLE1BT25DQyxVQVBtQyxHQVFqQ0wsS0FSaUMsQ0FPbkNLLFVBUG1DOztBQVVyQyxNQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFBQyxNQUFNLEVBQUk7QUFDNUJMLElBQUFBLE9BQU8sQ0FBQ0ssTUFBRCxDQUFQO0FBQ0FKLElBQUFBLGVBQWUsQ0FBQ0ksTUFBTSxDQUFDQyxJQUFSLENBQWY7QUFDRCxHQUhEOztBQUtBLFNBQ0VQLE9BQU8sQ0FBQ1EsTUFBUixHQUFpQixDQUFqQixHQUNFLGdDQUFDLDRCQUFELFFBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLElBREYsRUFFRSw0Q0FFSVIsT0FBTyxDQUFDUyxLQUFSLENBQWMsQ0FBZCxFQUFpQkwsVUFBakIsRUFBNkJNLEdBQTdCLENBQWtDLFVBQUFKLE1BQU07QUFBQSxXQUN0QztBQUNFLE1BQUEsR0FBRyxFQUFFQSxNQUFNLENBQUNLLEVBRGQ7QUFFRSxNQUFBLFdBQVcsRUFBRTtBQUFBLGVBQUlOLFdBQVcsQ0FBQ0MsTUFBRCxDQUFmO0FBQUEsT0FGZjtBQUdFLE1BQUEsT0FBTyxFQUFFO0FBQUEsZUFBSUQsV0FBVyxDQUFDQyxNQUFELENBQWY7QUFBQTtBQUhYLE9BS0dILFFBQVEsSUFBSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FBc0IsZ0NBQUMsc0JBQUQsT0FBdEIsQ0FMZixFQU1FO0FBQUssTUFBQSxTQUFTLEVBQUMsVUFBZjtBQUEwQixNQUFBLEtBQUssRUFBRUcsTUFBTSxDQUFDQztBQUF4QyxPQUNHRCxNQUFNLENBQUNDLElBRFYsQ0FORixDQURzQztBQUFBLEdBQXhDLENBRkosQ0FGRixDQURGLEdBb0JFLElBckJKO0FBdUJEOztBQUVEVCxPQUFPLENBQUNjLFlBQVIsR0FBdUI7QUFDckJaLEVBQUFBLE9BQU8sRUFBRSxFQURZO0FBRXJCRSxFQUFBQSxlQUFlLEVBQUUsMkJBQUksQ0FBRTtBQUZGLENBQXZCO0FBS0FKLE9BQU8sQ0FBQ2UsU0FBUixHQUFvQjtBQUNsQmIsRUFBQUEsT0FBTyxFQUFFYyxzQkFBVUMsS0FERDtBQUVsQmQsRUFBQUEsT0FBTyxFQUFFYSxzQkFBVUUsSUFGRDtBQUdsQmQsRUFBQUEsZUFBZSxFQUFFWSxzQkFBVUUsSUFIVDtBQUlsQmIsRUFBQUEsUUFBUSxFQUFFVyxzQkFBVUcsSUFKRjtBQUtsQmIsRUFBQUEsVUFBVSxFQUFFVSxzQkFBVUk7QUFMSixDQUFwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgeyBTZWFyY2hJY29uIH0gZnJvbSBcIi4uL2ljb25zL1NlYXJjaEljb25cIjtcclxuaW1wb3J0IHsgU3R5bGVkUmVzdWx0cyB9IGZyb20gXCIuL1N0eWxlZFJlc3VsdHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlc3VsdHMocHJvcHMpIHtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgcmVzdWx0cyxcclxuICAgIG9uQ2xpY2ssXHJcbiAgICBzZXRTZWFyY2hTdHJpbmcsXHJcbiAgICBzaG93SWNvbixcclxuICAgIG1heFJlc3VsdHMsXHJcbiAgfSA9IHByb3BzO1xyXG5cclxuICBjb25zdCBoYW5kbGVDbGljayA9IHJlc3VsdCA9PiB7XHJcbiAgICBvbkNsaWNrKHJlc3VsdCk7XHJcbiAgICBzZXRTZWFyY2hTdHJpbmcocmVzdWx0Lm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIHJlc3VsdHMubGVuZ3RoID4gMCA/XHJcbiAgICAgIDxTdHlsZWRSZXN1bHRzPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGluZVwiIC8+XHJcbiAgICAgICAgPHVsPlxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHRzLnNsaWNlKDAsIG1heFJlc3VsdHMpLm1hcCggcmVzdWx0ID0+IFxyXG4gICAgICAgICAgICAgIDxsaVxyXG4gICAgICAgICAgICAgICAga2V5PXtyZXN1bHQuaWR9XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KCk9PmhhbmRsZUNsaWNrKHJlc3VsdCl9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+aGFuZGxlQ2xpY2socmVzdWx0KX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7c2hvd0ljb24gJiYgPGRpdiBjbGFzc05hbWU9XCJpY29uXCI+PFNlYXJjaEljb24gLz48L2Rpdj59XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVsbGlwc2lzXCIgdGl0bGU9e3Jlc3VsdC5uYW1lfT5cclxuICAgICAgICAgICAgICAgICAge3Jlc3VsdC5uYW1lfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9saT4pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9TdHlsZWRSZXN1bHRzPlxyXG4gICAgOlxyXG4gICAgICBudWxsXHJcbiAgKVxyXG59XHJcblxyXG5SZXN1bHRzLmRlZmF1bHRQcm9wcyA9IHtcclxuICByZXN1bHRzOiBbXSxcclxuICBzZXRTZWFyY2hTdHJpbmc6ICgpPT57fSxcclxufVxyXG5cclxuUmVzdWx0cy5wcm9wVHlwZXMgPSB7XHJcbiAgcmVzdWx0czogUHJvcFR5cGVzLmFycmF5LFxyXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNldFNlYXJjaFN0cmluZzogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgc2hvd0ljb246IFByb3BUeXBlcy5ib29sLFxyXG4gIG1heFJlc3VsdHM6IFByb3BUeXBlcy5udW1iZXIsXHJcbn0iXX0=